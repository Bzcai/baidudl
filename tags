!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
CC	Makefile	/^CC	= gcc$/;"	m
CONFIG_LINE_MAX	bdpandl.c	56;"	d	file:
DLINFO_HST_SZ	dlinfo.h	25;"	d
DLINFO_NAME_MAX	dlinfo.h	27;"	d
DLINFO_PROMPT_SZ	dlinfo.c	35;"	d	file:
DLINFO_RCV_SZ	dlinfo.h	23;"	d
DLINFO_REQ_SZ	dlinfo.h	22;"	d
DLINFO_SRV_SZ	dlinfo.h	24;"	d
DLINFO_URL_SZ	dlinfo.h	26;"	d
DLPART_BUFSZ	dlpart.h	21;"	d
DLPART_NEW_TIMES	dlpart.c	32;"	d	file:
EMSG_BUF	err_handler.c	25;"	d	file:
EMSG_BUF	err_handler.c	26;"	d	file:
ERR_EXIT	err_handler.h	20;"	d
ERR_THREAD_EXIT	err_handler.h	21;"	d
FLAGS	Makefile	/^FLAGS	= -Wall -lpthread$/;"	m
OBJS	Makefile	/^OBJS	= err_handler.o dlinfo.o dlpart.o dlcommon.o$/;"	m
PERMS	dlinfo.c	326;"	d	file:
PROGRESS_PRINT_WS	dlinfo.c	416;"	d	file:
PROGS	Makefile	/^PROGS	= bdpandl$/;"	m
RANGE	dlpart.c	124;"	d	file:
_CONTENT_LENGTH	dlinfo.c	190;"	d	file:
_DEFAULT_SOURCE	dlpart.c	17;"	d	file:
_DLCOMMON_H	dlcommon.h	17;"	d
_DLINFO_H	dlinfo.h	17;"	d
_DLPART_H	dlpart.h	17;"	d
_ERR_HANDLE_H	err_handler.h	17;"	d
_FILENAME	dlinfo.c	200;"	d	file:
_GNU_SOURCE	bdpandl.c	17;"	d	file:
_POSIX_C_SOURCE	bdpandl.c	16;"	d	file:
_POSIX_C_SOURCE	dlpart.c	16;"	d	file:
_err_exit	err_handler.c	/^void _err_exit(int flags, int err, char *fmt, ...)$/;"	f
bytes_per_sec	dlinfo.c	/^		bytes_per_sec;$/;"	v	file:
connect	dlinfo.h	/^	int  (*connect)(struct dlinfo *);\/* used by dlpart_new *\/$/;"	m	struct:dlinfo
debug	err_handler.h	33;"	d
debug	err_handler.h	37;"	d
di_filename	dlinfo.h	/^	char	di_filename[DLINFO_NAME_MAX];$/;"	m	struct:dlinfo
di_host	dlinfo.h	/^	char	di_host[DLINFO_HST_SZ];	\/* host name or IP address *\/$/;"	m	struct:dlinfo
di_length	dlinfo.h	/^	ssize_t	di_length;	\/* total length of the file *\/$/;"	m	struct:dlinfo
di_local	dlinfo.h	/^	int	di_local;$/;"	m	struct:dlinfo
di_nthreads	dlinfo.h	/^	int	di_nthreads;	\/* number of threads to download *\/$/;"	m	struct:dlinfo
di_remote	dlinfo.h	/^	int	di_remote;$/;"	m	struct:dlinfo
di_serv	dlinfo.h	/^	char	di_serv[DLINFO_SRV_SZ];	\/* service type *\/$/;"	m	struct:dlinfo
di_threads	dlinfo.h	/^	struct dlthreads *di_threads;$/;"	m	struct:dlinfo	typeref:struct:dlinfo::dlthreads
di_url	dlinfo.h	/^	char	di_url[DLINFO_URL_SZ];	\/* oritinal download url request *\/$/;"	m	struct:dlinfo
dlinfo	dlinfo.h	/^struct dlinfo {$/;"	s
dlinfo_alarm_detach	dlinfo.c	/^static void dlinfo_alarm_detach(void)$/;"	f	file:
dlinfo_alarm_handler	dlinfo.c	/^static void dlinfo_alarm_handler(int signo)$/;"	f	file:
dlinfo_alarm_launch	dlinfo.c	/^static void dlinfo_alarm_launch(void)$/;"	f	file:
dlinfo_connect	dlinfo.c	/^int dlinfo_connect(struct dlinfo *dl)$/;"	f
dlinfo_delete	dlinfo.c	/^void dlinfo_delete(struct dlinfo *dl)$/;"	f
dlinfo_download_is_finished	dlinfo.c	/^static int dlinfo_download_is_finished(struct dlinfo *dl)$/;"	f	file:
dlinfo_filename_decode	dlinfo.c	/^static void dlinfo_filename_decode(struct dlinfo *dl)$/;"	f	file:
dlinfo_init	dlinfo.c	/^static char *dlinfo_init(struct dlinfo *dl)$/;"	f	file:
dlinfo_launch	dlinfo.c	/^void dlinfo_launch(struct dlinfo *dl)$/;"	f
dlinfo_new	dlinfo.c	/^struct dlinfo *dlinfo_new(char *url, char *filename, int nthreads)$/;"	f
dlinfo_open_local_file	dlinfo.c	/^static int dlinfo_open_local_file(struct dlinfo *dl)$/;"	f	file:
dlinfo_range_generator	dlinfo.c	/^static int dlinfo_range_generator(struct dlinfo *dl)$/;"	f	file:
dlinfo_records_recovery	dlinfo.c	/^static void dlinfo_records_recovery(struct dlinfo *dl, void *buf,$/;"	f	file:
dlinfo_records_recovery_all	dlinfo.c	/^static ssize_t dlinfo_records_recovery_all(struct dlinfo *dl)$/;"	f	file:
dlinfo_records_recovery_nthreads	dlinfo.c	/^static int dlinfo_records_recovery_nthreads(struct dlinfo *dl)$/;"	f	file:
dlinfo_records_removing	dlinfo.c	/^static void dlinfo_records_removing(struct dlinfo *dl)$/;"	f	file:
dlinfo_recv_and_parsing	dlinfo.c	/^static int dlinfo_recv_and_parsing(struct dlinfo *dl)$/;"	f	file:
dlinfo_register_alarm_handler	dlinfo.c	/^static void dlinfo_register_alarm_handler(void)$/;"	f	file:
dlinfo_send_request	dlinfo.c	/^static void dlinfo_send_request(struct dlinfo *dl)$/;"	f	file:
dlinfo_set_prompt	dlinfo.c	/^static char *dlinfo_set_prompt(struct dlinfo *dl)$/;"	f	file:
dlinfo_set_prompt_dyn	dlinfo.c	/^static void dlinfo_set_prompt_dyn(void)$/;"	f	file:
dlpart	dlpart.h	/^struct dlpart {$/;"	s
dlpart_delete	dlpart.c	/^void dlpart_delete(struct dlpart *dp)$/;"	f
dlpart_new	dlpart.c	/^struct dlpart *dlpart_new(struct dlinfo *dl, ssize_t start, ssize_t end, int no)$/;"	f
dlpart_read	dlpart.c	/^void dlpart_read(struct dlpart *dp)$/;"	f
dlpart_recv_header	dlpart.c	/^int dlpart_recv_header(struct dlpart *dp)$/;"	f
dlpart_send_header	dlpart.c	/^void dlpart_send_header(struct dlpart *dp)$/;"	f
dlpart_update	dlpart.c	/^static void dlpart_update(struct dlpart *dp)$/;"	f	file:
dlpart_write	dlpart.c	/^void dlpart_write(struct dlpart *dp, ssize_t *total_read,$/;"	f
dlthreads	dlinfo.h	/^struct dlthreads {$/;"	s
dorecovery	dlinfo.c	/^int dorecovery;$/;"	v
download	dlinfo.c	/^static void *download(void *arg)$/;"	f	file:
download_from_file	bdpandl.c	/^static void download_from_file(const char *listfile, int nts)$/;"	f	file:
download_from_url	bdpandl.c	/^static void download_from_url(char *url, char *filename, int nts)$/;"	f	file:
dp	dlinfo.h	/^	struct dlpart *dp;$/;"	m	struct:dlthreads	typeref:struct:dlthreads::dlpart
dp_buf	dlpart.h	/^	char	dp_buf[DLPART_BUFSZ];$/;"	m	struct:dlpart
dp_end	dlpart.h	/^	ssize_t	dp_end;$/;"	m	struct:dlpart
dp_info	dlpart.h	/^	struct dlinfo *dp_info;$/;"	m	struct:dlpart	typeref:struct:dlpart::dlinfo
dp_no	dlpart.h	/^	int	dp_no;$/;"	m	struct:dlpart
dp_nrd	dlpart.h	/^	int	dp_nrd;$/;"	m	struct:dlpart
dp_remote	dlpart.h	/^	int	dp_remote;	\/* remote server file descriptor *\/$/;"	m	struct:dlpart
dp_start	dlpart.h	/^	ssize_t	dp_start;$/;"	m	struct:dlpart
err_exit	err_handler.h	23;"	d
err_msg	err_handler.h	29;"	d
err_thread_exit	err_handler.h	26;"	d
filename_dyn	dlinfo.c	/^		filename_dyn;$/;"	v	file:
filename_fnm	dlinfo.c	/^static char	*filename_fnm;	\/* point to temporary used file name *\/$/;"	v	file:
filename_len	dlinfo.c	/^static size_t	filename_len,$/;"	v	file:
getrcode	dlcommon.c	/^int getrcode(char *s)$/;"	f
geturi	dlcommon.c	/^char *geturi(const char *s, const char *u)$/;"	f
launch	dlinfo.h	/^	void (*launch)(struct dlinfo *);$/;"	m	struct:dlinfo
main	bdpandl.c	/^int main(int argc, char *argv[])$/;"	f
mutex	dlpart.c	/^static pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v	file:
next	dlinfo.h	/^	struct dlthreads *next;$/;"	m	struct:dlthreads	typeref:struct:dlthreads::dlthreads
nwrite	dlcommon.c	/^void nwrite(int fd, const void *buf, unsigned int len)$/;"	f
prompt	dlinfo.c	/^static char prompt[DLINFO_PROMPT_SZ];$/;"	v	file:
read	dlpart.h	/^	void (*read)(struct dlpart *);$/;"	m	struct:dlpart
recvhdr	dlpart.h	/^	int  (*recvhdr)(struct dlpart *);$/;"	m	struct:dlpart
rgstralrm	dlinfo.h	/^	void (*rgstralrm)(void);$/;"	m	struct:dlinfo
sendhdr	dlpart.h	/^	void (*sendhdr)(struct dlpart *);$/;"	m	struct:dlpart
setprompt	dlinfo.h	/^	void (*setprompt)(struct dlinfo *);$/;"	m	struct:dlinfo
sig_cnt	dlinfo.c	/^static long	sig_cnt;$/;"	v	file:
thread	dlinfo.h	/^	pthread_t thread;$/;"	m	struct:dlthreads
total	dlinfo.c	/^static ssize_t	total,$/;"	v	file:
total_read	dlinfo.c	/^		total_read,$/;"	v	file:
try_ignore_records	dlinfo.c	/^int try_ignore_records;$/;"	v
usage	bdpandl.c	/^static void usage(const char *progname)$/;"	f	file:
write	dlpart.h	/^	void (*write)(struct dlpart *, ssize_t *, ssize_t *);$/;"	m	struct:dlpart
